{"version":3,"file":"static/js/684.cd2a2d59.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/utils/validators.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport \"./PlaceForm.css\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/utils/validators\";\r\nimport useForm from \"../../shared/hooks/form-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst UpdatePlace = () => {\r\n  const { isLoading, isError, clearErrorHandler, sendRequest } =\r\n    useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n\r\n  const placeId = useParams().placeId;\r\n  const auth = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_URL}/places/${placeId}`\r\n        );\r\n\r\n        setLoadedPlace(responseData);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (error) {}\r\n    };\r\n\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_URL}/places/${placeId}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${auth.token}`,\r\n        }\r\n      );\r\n      navigate(`/${auth.userId}/places`);\r\n    } catch (error) {}\r\n    // console.log(formState.inputs);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedPlace && isError) {\r\n    return (\r\n      <div className=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Card>\r\n          <h2>Could not find this place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={isError} onClear={clearErrorHandler} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            element=\"input\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            initialValue={loadedPlace.title}\r\n            initialValid={true}\r\n            errorText=\"Please enter a valid title!\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            label=\"Description\"\r\n            element=\"textarea\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            initialValue={loadedPlace.description}\r\n            initialValid={true}\r\n            errorText=\"Please enter a valid description! (atleast 5 characters)\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n","import React, { useEffect } from \"react\";\r\nimport { useReducer } from \"react\";\r\nimport { validate } from \"../../utils/validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCHED\":\r\n      return { ...state, isTouched: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || \"\",\r\n    isTouched: false,\r\n    isValid: props.initialValid || false,\r\n  });\r\n\r\n  const { onInput, id } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = (e) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: e.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({ type: \"TOUCHED\" });\r\n  };\r\n\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        onChange={changeHandler}\r\n        value={inputState.value}\r\n        type={props.type}\r\n        onBlur={touchHandler}\r\n        placeholder={props.placeholder}\r\n        id={props.id}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        value={inputState.value}\r\n        rows={props.rows || 3}\r\n        id={props.id}\r\n        onBlur={touchHandler}\r\n        onChange={changeHandler}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n\r\n    case \"SET_DATA\":\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst useForm = (initialInputs, initialFormValidity) => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    });\r\n  }, []);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n\r\nexport default useForm;\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n"],"names":["useHttpClient","isLoading","isError","clearErrorHandler","sendRequest","useState","loadedPlace","setLoadedPlace","placeId","useParams","auth","useContext","AuthContext","navigate","useNavigate","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","fetchPlace","process","responseData","placeUpdateHandler","e","preventDefault","JSON","stringify","inputs","Authorization","token","userId","className","style","marginTop","error","onClear","onSubmit","id","type","label","element","validators","VALIDATOR_REQUIRE","initialValue","initialValid","errorText","onInput","VALIDATOR_MINLENGTH","disabled","inputReducer","state","action","val","validate","isTouched","props","useReducer","inputState","dispatch","changeHandler","target","touchHandler","onChange","onBlur","placeholder","rows","htmlFor","children","formReducer","formIsValid","inputId","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","validator","trim","length","test"],"sourceRoot":""}