{"version":3,"file":"static/js/785.67e4126b.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/utils/validators.js","user/pages/Auth.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const filePickerRef = useRef();\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  const pickedHandler = (e) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (e.target.files && e.target.files.length === 1) {\r\n      pickedFile = e.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        style={{ display: \"none\" }}\r\n        type=\"file\"\r\n        accept=\".jpg, .png, .jpeg\"\r\n        ref={filePickerRef}\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl ? (\r\n            <img src={previewUrl} alt=\"preview\" />\r\n          ) : (\r\n            <p>Please pick an image.</p>\r\n          )}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n        {!isValid && <p>{props.errorText}</p>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useEffect } from \"react\";\r\nimport { useReducer } from \"react\";\r\nimport { validate } from \"../../utils/validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCHED\":\r\n      return { ...state, isTouched: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || \"\",\r\n    isTouched: false,\r\n    isValid: props.initialValid || false,\r\n  });\r\n\r\n  const { onInput, id } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = (e) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: e.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({ type: \"TOUCHED\" });\r\n  };\r\n\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        onChange={changeHandler}\r\n        value={inputState.value}\r\n        type={props.type}\r\n        onBlur={touchHandler}\r\n        placeholder={props.placeholder}\r\n        id={props.id}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        value={inputState.value}\r\n        rows={props.rows || 3}\r\n        id={props.id}\r\n        onBlur={touchHandler}\r\n        onChange={changeHandler}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n\r\n    case \"SET_DATA\":\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst useForm = (initialInputs, initialFormValidity) => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    });\r\n  }, []);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n\r\nexport default useForm;\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport useForm from \"../../shared/hooks/form-hook\";\r\nimport \"./Auth.css\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/utils/validators\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nconst Auth = () => {\r\n  const [isLoginMode, setIsLoginMode] = useState(true);\r\n\r\n  const { isLoading, isError, sendRequest, clearErrorHandler } =\r\n    useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  const switchLoginHandler = () => {\r\n    if (!isLoginMode) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLoginMode((prevState) => !prevState);\r\n  };\r\n\r\n  const loginHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (isLoginMode) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_URL}/users/login`,\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (error) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_URL}/users/signup`,\r\n          \"POST\",\r\n          formData\r\n        );\r\n        console.log(responseData);\r\n\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (error) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={isError} onClear={clearErrorHandler} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && <LoadingSpinner asOverlay />}\r\n        <h2>{isLoginMode ? \"Login\" : \"Sign Up\"}</h2>\r\n        <hr />\r\n        <form onSubmit={loginHandler}>\r\n          {!isLoginMode && (\r\n            <Input\r\n              id=\"name\"\r\n              label=\"Name\"\r\n              type=\"text\"\r\n              element=\"input\"\r\n              placeholder=\"Your Name\"\r\n              errorText=\"Please enter a name!\"\r\n              onInput={inputHandler}\r\n              validators={[VALIDATOR_REQUIRE()]}\r\n            />\r\n          )}\r\n          <Input\r\n            id=\"email\"\r\n            label=\"E-mail\"\r\n            type=\"email\"\r\n            element=\"input\"\r\n            placeholder=\"E-mail\"\r\n            errorText=\"Please enter a valid email address!\"\r\n            onInput={inputHandler}\r\n            validators={[VALIDATOR_EMAIL()]}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            element=\"input\"\r\n            placeholder=\"Password\"\r\n            errorText=\"Please enter a valid password, atleast 6 characters!\"\r\n            onInput={inputHandler}\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n          />\r\n          {!isLoginMode && (\r\n            <ImageUpload\r\n              onInput={inputHandler}\r\n              center\r\n              id=\"image\"\r\n              errorText=\"Please provide an image\"\r\n            />\r\n          )}\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchLoginHandler}>\r\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["props","filePickerRef","useRef","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","style","display","type","accept","ref","onChange","e","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","useReducer","initialValue","initialValid","inputState","dispatch","changeHandler","touchHandler","element","onBlur","placeholder","rows","htmlFor","label","children","formReducer","formIsValid","inputId","inputs","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","isLoginMode","setIsLoginMode","useHttpClient","isLoading","isError","sendRequest","clearErrorHandler","useForm","email","password","inputHandler","setFormData","auth","useContext","AuthContext","loginHandler","preventDefault","process","JSON","stringify","responseData","login","userId","token","formData","FormData","append","name","image","console","log","ErrorModal","error","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","inverse","undefined","prevState"],"sourceRoot":""}