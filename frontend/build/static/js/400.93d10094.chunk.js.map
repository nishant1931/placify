{"version":3,"file":"static/js/400.93d10094.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/hooks/form-hook.js","shared/utils/validators.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport \"./PlaceForm.css\";\r\nimport {\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/utils/validators\";\r\nimport useForm from \"../../shared/hooks/form-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst UpdatePlace = () => {\r\n  const { isLoading, isError, clearErrorHandler, sendRequest } =\r\n    useHttpClient();\r\n  const [loadedPlace, setLoadedPlace] = useState();\r\n\r\n  const placeId = useParams().placeId;\r\n  const auth = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      title: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      description: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  useEffect(() => {\r\n    const fetchPlace = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_URL}/places/${placeId}`\r\n        );\r\n\r\n        setLoadedPlace(responseData);\r\n        setFormData(\r\n          {\r\n            title: {\r\n              value: responseData.title,\r\n              isValid: true,\r\n            },\r\n            description: {\r\n              value: responseData.description,\r\n              isValid: true,\r\n            },\r\n          },\r\n          true\r\n        );\r\n      } catch (error) {}\r\n    };\r\n\r\n    fetchPlace();\r\n  }, [sendRequest, placeId, setFormData]);\r\n\r\n  const placeUpdateHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      await sendRequest(\r\n        `${process.env.REACT_APP_URL}/places/${placeId}`,\r\n        \"PATCH\",\r\n        JSON.stringify({\r\n          title: formState.inputs.title.value,\r\n          description: formState.inputs.description.value,\r\n        }),\r\n        {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: `Bearer ${auth.token}`,\r\n        }\r\n      );\r\n      navigate(`/${auth.userId}/places`);\r\n    } catch (error) {}\r\n    // console.log(formState.inputs);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"center\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!loadedPlace && isError) {\r\n    return (\r\n      <div className=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Card>\r\n          <h2>Could not find this place!</h2>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={isError} onClear={clearErrorHandler} />\r\n      {!isLoading && loadedPlace && (\r\n        <form className=\"place-form\" onSubmit={placeUpdateHandler}>\r\n          <Input\r\n            id=\"title\"\r\n            type=\"text\"\r\n            label=\"Title\"\r\n            element=\"input\"\r\n            validators={[VALIDATOR_REQUIRE()]}\r\n            initialValue={loadedPlace.title}\r\n            initialValid={true}\r\n            errorText=\"Please enter a valid title!\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            id=\"description\"\r\n            label=\"Description\"\r\n            element=\"textarea\"\r\n            validators={[VALIDATOR_MINLENGTH(5)]}\r\n            initialValue={loadedPlace.description}\r\n            initialValid={true}\r\n            errorText=\"Please enter a valid description! (atleast 5 characters)\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            UPDATE PLACE\r\n          </Button>\r\n        </form>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UpdatePlace;\r\n","import React, { useEffect } from \"react\";\r\nimport { useReducer } from \"react\";\r\nimport { validate } from \"../../utils/validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCHED\":\r\n      return { ...state, isTouched: true };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || \"\",\r\n    isTouched: false,\r\n    isValid: props.initialValid || false,\r\n  });\r\n\r\n  const { onInput, id } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, value, isValid, onInput]);\r\n\r\n  const changeHandler = (e) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: e.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({ type: \"TOUCHED\" });\r\n  };\r\n\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        onChange={changeHandler}\r\n        value={inputState.value}\r\n        type={props.type}\r\n        onBlur={touchHandler}\r\n        placeholder={props.placeholder}\r\n        id={props.id}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        value={inputState.value}\r\n        rows={props.rows || 3}\r\n        id={props.id}\r\n        onBlur={touchHandler}\r\n        onChange={changeHandler}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`card ${props.className}`} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n\r\n    case \"SET_DATA\":\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formIsValid,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst useForm = (initialInputs, initialFormValidity) => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity,\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formIsValid: formValidity,\r\n    });\r\n  }, []);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n\r\nexport default useForm;\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n"],"names":["_useHttpClient","useHttpClient","isLoading","isError","clearErrorHandler","sendRequest","_useState","useState","_useState2","_slicedToArray","loadedPlace","setLoadedPlace","placeId","useParams","auth","useContext","AuthContext","navigate","useNavigate","_useForm","useForm","title","value","isValid","description","_useForm2","formState","inputHandler","setFormData","useEffect","fetchPlace","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","wrap","_context","prev","next","concat","process","sent","t0","stop","apply","arguments","placeUpdateHandler","_ref2","_callee2","e","_context2","preventDefault","JSON","stringify","inputs","Authorization","token","userId","_x","_jsx","className","children","LoadingSpinner","style","marginTop","Card","_jsxs","React","ErrorModal","error","onClear","onSubmit","Input","id","type","label","element","validators","VALIDATOR_REQUIRE","initialValue","initialValid","errorText","onInput","VALIDATOR_MINLENGTH","Button","disabled","inputReducer","state","action","_objectSpread","val","validate","isTouched","props","_useReducer","useReducer","_useReducer2","inputState","dispatch","changeHandler","target","touchHandler","onChange","onBlur","placeholder","rows","htmlFor","formReducer","formIsValid","inputId","_defineProperty","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_EMAIL","_step","_iterator","_createForOfIteratorHelper","s","n","done","validator","trim","length","test","err","f"],"sourceRoot":""}